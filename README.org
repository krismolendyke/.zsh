#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Prerequisites

  #+BEGIN_SRC sh
    mkdir -p ~/.bashrc.d/secret
    # TODO: fix the fact that something below this needs a file to exist in the secrets dir
    mkdir -p ~/.ssh/config
  #+END_SRC

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.bashrc=, will be generated.

* Shell

** Change Default Shell

   This should be the Homebrew installed =bash= /not/ the system
   =bash= path.

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/bash
     export SHELL=/usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     echo ${SHELL}
   #+END_SRC

   On OS X:

   #+BEGIN_SRC sh
     sudo dscl . -create ${HOME} UserShell /usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     dscl . -read ${HOME} UserShell
   #+END_SRC

   Make the Bash configuration directory:

   #+BEGIN_SRC sh
     mkdir -p "${HOME}/.bashrc.d"
   #+END_SRC

** =.inputrc=
   :PROPERTIES:
   :header-args: :tangle ~/.inputrc
   :END:

   #+BEGIN_SRC sh
     set bell-style none
     set colored-completion-prefix on
     set colored-stats on
     set completion-ignore-case off
     set convert-meta off
     set expand-tilde on
     set input-meta on
     set output-meta on
     set show-all-if-ambiguous on
     set visible-stats on
   #+END_SRC

** =.bash_profile=
   :PROPERTIES:
   :header-args: :tangle ~/.bash_profile
   :END:

   #+BEGIN_SRC sh
     source "${HOME}/.bashrc"
   #+END_SRC

** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc
   :END:

   Load all configuration:

   #+BEGIN_SRC sh
     for f in "${HOME}/.bashrc.d/"*.bash; do
         source "${f}"
     done
     unset -v config
   #+END_SRC

** Custom
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/main.bash
   :END:

   Interactive shell options.

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export K20E_SECRET_HOME=${HOME}/.bashrc.d/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${K20E_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${K20E_SECRET_HOME}
      chmod -Rf 0600 ${K20E_SECRET_HOME}/*.sh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export K20E_SECRET_VARIABLES=${K20E_SECRET_HOME}/variables.sh
      export K20E_SECRET_ALIASES=${K20E_SECRET_HOME}/aliases.sh
      export K20E_SECRET_PATH=${K20E_SECRET_HOME}/path.sh
      export K20E_SECRET_FUNCTIONS=${K20E_SECRET_HOME}/functions.sh
    #+END_SRC

*** Options

    #+BEGIN_SRC sh
      shopt -s \
            autocd \
            cdspell \
            checkjobs \
            checkwinsize \
            dirspell \
            no_empty_cmd_completion
    #+END_SRC

*** Variables

    Bash variables.

    #+BEGIN_SRC sh
      LANG=en_US.UTF-8

      HISTSIZE=100000
      HISTCONTROL=erasedups
      HISTTIMEFORMAT='%F %T '
    #+END_SRC

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/Code
      export GOOGLE=${HOME}/Google
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      export CARGO_HOME=${HOME}/.cargo

      # https://github.com/rust-lang-nursery/rustfmt#tips
      export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:${DYLD_LIBRARY_PATH}

      export CHICKEN_HOME=$(/usr/local/bin/csi -print '(chicken-home)' | cut -d/ -f 1-8)
      export GROOVY_HOME=/usr/local/opt/groovy/libexec
      export JAVA_HOME=$(/usr/libexec/java_home)
      export VLC_HOME=/Applications/VLC.app/Contents/MacOS

      export DESKTOP=${HOME}/Desktop
      export DOWNLOADS=${HOME}/Downloads
      export GOPATH=${HOME}/go
      export GOROOT=/usr/local/opt/go/libexec
      export HOMEBREW_CASK_HOME=/usr/local/Caskroom
      export HOMEBREW_CELLAR=$(/usr/local/bin/brew --cellar)

      export MANPATH=/usr/local/share/man:${MANPATH}
      export NODE_PATH=/usr/local/lib/node_modules:${NODE_PATH}
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export EMACS_VERSION="HEAD"
      export LANG=en_US.UTF-8
      export PIPENV_SHELL_FANCY=1
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_VARIABLES} ]; then
          source ${K20E_SECRET_VARIABLES}
      fi
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      export CDPATH="${CODE_HOME}:${GOOGLE}"
    #+END_SRC

*** =PATH=

    #+BEGIN_SRC sh
      pathmunge () {
          case ":${PATH}:" in
              ,*:"$1":*)
                  ;;
              ,*)
                  if [ "$2" = "after" ] ; then
                      PATH=$PATH:$1
                  else
                      PATH=$1:$PATH
                  fi
          esac
      }
    #+END_SRC

    #+BEGIN_SRC sh
      pathmunge /usr/local/opt/python/libexec/bin
      pathmunge /usr/local/sbin
      pathmunge /usr/local/bin
      pathmunge "${HOME}/bin"
      pathmunge "${CARGO_HOME}/bin"
      pathmunge "${GOPATH}/bin"
      pathmunge "${GOROOT}/bin"
      pathmunge "${VLC_HOME}"
      pathmunge "$(/usr/local/bin/brew --prefix git)/share/git-core/contrib/diff-highlight"
      pathmunge "${CHICKEN_HOME}/bin"
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_PATH} ]; then
          source ${K20E_SECRET_PATH}
      fi
    #+END_SRC

*** =PYTHON_USER_BASE=

    Add Python =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user
    - http://docs.pipenv.org/en/latest/basics.html#installing-pipenv

    #+BEGIN_SRC sh
      export PYTHON_USER_BASE=$(python -m site --user-base)
      pathmunge "${PYTHON_USER_BASE}/bin"
    #+END_SRC

*** =PROMPT_COMMAND=

    TODO try out https://github.com/magicmonty/bash-git-prompt

    #+BEGIN_SRC sh
      [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ] && source /usr/local/etc/bash_completion.d/git-prompt.sh

      GIT_PS1_SHOWCOLORHINTS=1
      GIT_PS1_SHOWDIRTYSTATE=1
      GIT_PS1_SHOWUNTRACKEDFILES=1
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_working_directory() {
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          echo "${YELLOW}\w${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_virtual_env() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RESET='\[\e[0m\]'
          local venv=''
          if [ -n "${VIRTUAL_ENV}" ] && [ -d "${VIRTUAL_ENV}" ]; then
              venv=$(basename "${VIRTUAL_ENV}")
              venv="${venv} "
          fi
          echo "${BLUE}${venv}${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      PROMPT_COMMAND='__git_ps1 \
      "$(k20e_virtual_env)$(k20e_working_directory)" \
      "\n\$ " \
      " %s"'
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ..="cd ../"
      alias ...="cd ../../"
      alias ....="cd ../../.."
      alias brewdump="brew bundle dump --force --global --verbose && pbcopy < ${HOME}/.Brewfile"
      alias emacs="/usr/local/bin/emacs --no-window-system"
      alias emacsclient="/usr/local/bin/emacsclient --no-wait"
      alias ec=emacsclient
      alias g="git"
      alias j="jobs -l"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls -lhF"
      alias ls="ls -GF"
      alias top="top -ocpu -Orsize"
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_ALIASES} ]; then
          source ${K20E_SECRET_ALIASES}
      fi
    #+END_SRC

**** =ssh TERM=

     My Emacs =multi-term= with =bash= has =TERM=xterm-256color=.  On
     many remote hosts, primarily Amazon Linux, any =xterm= sets
     =PROMPT_COMMAND= and garbles the prompt by attempting to set the
     window title.  =/etc/bashrc= usually contains something like
     this:

     #+BEGIN_EXAMPLE
       if [ -z "$PROMPT_COMMAND" ]; then
         case $TERM in
         xterm*)
             if [ -e /etc/sysconfig/bash-prompt-xterm ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         screen)
             if [ -e /etc/sysconfig/bash-prompt-screen ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         ,*)
             [ -e /etc/sysconfig/bash-prompt-default ] && PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default
             ;;
           esac
       fi
     #+END_EXAMPLE

     Hacking that to some other reasonable value avoids prompt
     garbling and muscle memory typing =unset PROMPT_COMMAND=.

     #+BEGIN_SRC sh
       alias ssh="TERM=ansi ssh"
     #+END_SRC

*** Completions

    #+BEGIN_SRC sh
      [ -e /usr/local/share/bash-completion/bash_completion ] && source /usr/local/share/bash-completion/bash_completion
    #+END_SRC

**** =ag=

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/ag.bashcomp.sh ] && source /usr/local/etc/bash_completion.d/ag.bashcomp.sh
     #+END_SRC

**** Git

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/git-completion.bash ] && source /usr/local/etc/bash_completion.d/git-completion.bash
     #+END_SRC

     Add completion for my muscle memory alias of =g= for =git=:

     #+BEGIN_SRC sh
        __git_complete g __git_main
     #+END_SRC

**** Gradle

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/gradle-completion.bash ] && source /usr/local/etc/bash_completion.d/gradle-completion.bash
     #+END_SRC

**** =pip=

     #+BEGIN_SRC sh
       eval "$(pip completion --bash)"
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_FUNCTIONS} ]; then
          source ${K20E_SECRET_FUNCTIONS}
      fi
    #+END_SRC

*** Google Cloud SDK

    Completion:

    #+BEGIN_SRC sh
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc
    #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e-pip-upgrade() {
          if [[ $(which deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

*** [[https://virtualenvwrapper.readthedocs.org/en/latest/][virtualenvwrapper]]

    #+BEGIN_SRC sh
      if (( ${PIPENV_ACTIVE:-0} != 1 )); then
         source virtualenvwrapper.sh
      fi
    #+END_SRC

* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

   #+BEGIN_SRC gitconfig
     [user]
           name = Kris
           email = krismolendyke@users.noreply.github.com
           useconfigonly = true
     [color]
           ui = auto
     [core]
           excludesfile = ~/.gitignore-global
           whitespace = -trailing-space,-space-before-tab
           editor = emacsclient
     [credential]
           helper = osxkeychain
     [apply]
           whitespace = nowarn
     [alias]
           diff = diff --color-moved
           stache = stash
           st = status -sb
           a = add -p
           l = log --color-moved --stat --no-merges
           lp = log --color-moved --patch --stat --no-merges
           wlp = log --color-moved --patch --stat --color-words --no-merges
           lo = log --color-moved --oneline --decorate --no-merges
           lf = log --color-moved --pretty=format: --name-only -z --max-count 1 --no-merges
           co = checkout
           br = branch -vv
           wdiff = diff --color-moved --color-words
           ds = diff --color-moved --staged
     [advice]
           statusHints = true
     [rebase]
           autosquash = true
     [diff]
           algorithm = histogram
           compactionHeuristic = 1
           colorMoved = zebra
     [help]
           autocorrect = 1
     [pager]
           diff = diff-highlight | less
           log = diff-highlight | less
           show = diff-highlight | less
     [interactive]
           diffFilter = diff-highlight
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/macOS.gitignore #
     ##########################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk


     ##############################################################################
     # Below from:                                                                #
     #                                                                            #
     # https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore #
     ##############################################################################

     # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
     # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

     # User-specific stuff
     .idea/**/workspace.xml
     .idea/**/tasks.xml
     .idea/**/usage.statistics.xml
     .idea/**/dictionaries
     .idea/**/shelf

     # Generated files
     .idea/**/contentModel.xml

     # Sensitive or high-churn files
     .idea/**/dataSources/
     .idea/**/dataSources.ids
     .idea/**/dataSources.local.xml
     .idea/**/sqlDataSources.xml
     .idea/**/dynamic.xml
     .idea/**/uiDesigner.xml
     .idea/**/dbnavigator.xml

     # Gradle
     .idea/**/gradle.xml
     .idea/**/libraries

     # Gradle and Maven with auto-import
     # When using Gradle or Maven with auto-import, you should exclude module files,
     # since they will be recreated, and may cause churn.  Uncomment if using
     # auto-import.
     .idea/modules.xml
     .idea/*.iml
     .idea/modules

     # CMake
     cmake-build-*/

     # Mongo Explorer plugin
     .idea/**/mongoSettings.xml

     # File-based project format
     ,*.iws

     # IntelliJ
     out/

     # mpeltonen/sbt-idea plugin
     .idea_modules/

     # JIRA plugin
     atlassian-ide-plugin.xml

     # Cursive Clojure plugin
     .idea/replstate.xml

     # Crashlytics plugin (for Android Studio and IntelliJ)
     com_crashlytics_export_strings.xml
     crashlytics.properties
     crashlytics-build.properties
     fabric.properties

     # Editor-based Rest Client
     .idea/httpRequests

     # Android studio 3.1+ serialized cache file
     .idea/caches/build_file_checksums.ser
   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt
   :END:

   Use [[https://www.kennethreitz.org/essays/a-better-pip-workflow][A Better Pip Workflow™]] to specify packages that I do actually
   want installed to the user's packages.

   #+BEGIN_SRC python
     # User packages
     http-prompt
     keyring
     pipdeptree[graphviz]
     twine
     virtualenvwrapper
   #+END_SRC

* [[https://brew.sh/][Homebrew]]

  =brew= doesn't have a great way to manage dependencies that I've
  found outside of a =Brewfile= and the =bundle= subcommand.

** Security

   From https://www.davd.eu/securing-macos/#homebrew

   #+BEGIN_SRC sh
     export HOMEBREW_NO_INSECURE_REDIRECT=1
     export HOMEBREW_CASK_OPTS=--require-sha
   #+END_SRC

** [[https://github.com/Homebrew/homebrew-bundle][Bundle]]

   Install:

   #+BEGIN_SRC sh
     brew tap Homebrew/bundle
   #+END_SRC

   Programs currently installed by =brew= can be dumped to a global
   =Brewfile=, which defaults to =${HOME}/.Brewfile=:

   #+BEGIN_SRC sh
     brew bundle dump --force --global --verbose
   #+END_SRC

   Install all programs specified in the global =${HOME}./Brewfile=:

   #+BEGIN_SRC sh
     brew bundle --global
   #+END_SRC

** =${HOME}/.Brewfile=
   :PROPERTIES:
   :header-args: :tangle ~/.Brewfile
   :END:

   #+BEGIN_SRC sh
     tap "homebrew/bundle"
     tap "homebrew/cask"
     tap "homebrew/cask-fonts"
     tap "homebrew/cask-versions"
     tap "homebrew/core"
     tap "homebrew/services"
     tap "jmespath/jmespath"
     cask "xquartz"
     brew "apr"
     brew "openssl"
     brew "apr-util"
     brew "aspell"
     brew "automake"
     brew "bash"
     brew "bash-completion@2"
     brew "bison"
     brew "freetype"
     brew "fontconfig"
     brew "font-input"
     brew "gettext", link: true
     brew "pixman"
     brew "cairo"
     brew "emacs", args: ["HEAD", "with-cocoa"]
     brew "cask"
     brew "chicken"
     brew "cmake"
     brew "docker-completion"
     brew "faac"
     brew "lame"
     brew "xvid"
     brew "ffmpeg"
     brew "flex"
     brew "gawk"
     brew "gcc"
     brew "gd"
     brew "gdk-pixbuf"
     brew "gdub"
     brew "gflags"
     brew "git"
     brew "go"
     brew "python"
     brew "gprof2dot"
     brew "gradle"
     brew "grafana"
     brew "groovy"
     brew "harfbuzz"
     brew "hunspell"
     brew "imagemagick"
     brew "influxdb"
     brew "ipcalc"
     brew "ispell"
     brew "kafka"
     brew "lz4"
     brew "kafkacat"
     brew "kotlin"
     brew "kubernetes-cli"
     brew "less"
     brew "libav"
     brew "libcroco"
     brew "libdvdcss"
     brew "librsvg"
     brew "libssh"
     brew "libyaml"
     brew "make"
     brew "makedepend"
     brew "mariadb"
     brew "mas"
     brew "maven"
     brew "ninja"
     brew "node"
     brew "oniguruma"
     brew "parallel"
     brew "perl"
     brew "protobuf"
     brew "prototool"
     brew "pstree"
     brew "pv"
     brew "rocksdb"
     brew "ruby"
     brew "rustup-init"
     brew "scons"
     brew "shared-mime-info"
     brew "sshtrix"
     brew "subversion"
     brew "terminal-notifier"
     brew "texi2html"
     brew "the_silver_searcher"
     brew "tree"
     brew "watch"
     brew "wget"
     brew "yarn"
     brew "yasm"
     brew "youtube-dl"
     brew "jmespath/jmespath/jp"
     cask "1password"
     cask "alfred"
     cask "android-platform-tools"
     cask "charles"
     cask "devdocs"
     cask "docker"
     cask "etcher"
     cask "firefox"
     cask "flux"
     cask "google-backup-and-sync"
     cask "google-chrome"
     cask "google-cloud-sdk"
     cask "google-featured-photos"
     cask "handbrake"
     cask "inkscape"
     cask "intellij-idea"
     cask "istat-menus5"
     cask "iterm2"
     cask "java8"
     cask "keepingyouawake"
     cask "mactex-no-gui"
     cask "pocket-casts"
     cask "racket"
     cask "slack"
     cask "vanilla"
     cask "viscosity"
     cask "vlc"
     mas "Pages", id: 409201541
     mas "Pixelmator", id: 407963104
   #+END_SRC

** [[https://github.com/mas-cli/mas][mas]]

   #+BEGIN_QUOTE
   A simple command line interface for the Mac App Store. Designed for
   scripting and automation.
   #+END_QUOTE

   The =Bundlefile= above should install the App Store programs listed
   with in it using =mas=.

* SSH

  Create a configuration directory:

  #+BEGIN_SRC sh
    mkdir -p ${HOME}/.ssh/config.d
  #+END_SRC

** =config=
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config
   :END:

   #+BEGIN_SRC conf
     ServerAliveCountMax 5
     ServerAliveInterval 60
     UseKeychain yes

     Host *
         IdentityFile ~/.ssh/id_rsa
         PreferredAuthentications publickey,password

     Include ~/.ssh/config.d/*
   #+END_SRC
