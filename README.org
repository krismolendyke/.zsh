#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.zshrc=, will be generated.

* [[http://www.zsh.org][Zsh]]

** Change Default Shell

   #+BEGIN_SRC sh
     chsh -s /bin/zsh
   #+END_SRC

** =.zshenv=
   :PROPERTIES:
   :header-args: :tangle ~/.zshenv
   :END:

   =.zshenv= is always sourced.

   #+BEGIN_SRC sh
     export ZDOTDIR=~/.zsh
   #+END_SRC

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export ZSH_SECRET_HOME=${ZDOTDIR}/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${ZSH_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${ZSH_SECRET_HOME}
      chmod -Rf 0600 ${ZSH_SECRET_HOME}/*.zsh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export ZSH_SECRET_VARIABLES=${ZSH_SECRET_HOME}/variables.zsh
      export ZSH_SECRET_ALIASES=${ZSH_SECRET_HOME}/aliases.zsh
      export ZSH_SECRET_PATH=${ZSH_SECRET_HOME}/path.zsh
      export ZSH_SECRET_FUNCTIONS=${ZSH_SECRET_HOME}/functions.zsh
    #+END_SRC

*** Variables

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/Code
      export GOOGLE=${HOME}/Google
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      export ANDROID_SDK_HOME=${GOOGLE}/org/nexus
      export CARGO_HOME=${HOME}/.cargo
      export CASK_HOME=${HOME}/.cask
      export CHICKEN_HOME=$(/usr/local/bin/csi -print '(chicken-home)' | cut -d/ -f 1-8)
      export GROOVY_HOME=/usr/local/opt/groovy/libexec
      export JAVA_HOME=$(/usr/libexec/java_home)
      export VLC_HOME=/Applications/VLC.app/Contents/MacOS

      export DESKTOP=${HOME}/Desktop
      export DOWNLOADS=${HOME}/Downloads
      export GOROOT=/usr/local/opt/go/libexec
      export HOMEBREW_CELLAR=$(/usr/local/bin/brew --prefix)/Cellar

      export GOPATH=${CODE_HOME}/go
      export MANPATH=/usr/local/share/man:${MANPATH}
      export NODE_PATH=/usr/local/lib/node_modules:${NODE_PATH}
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export EMACS_VERSION="HEAD"
      export LANG=en_US.UTF-8
      export PIPENV_SHELL_FANCY=1
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [[ -e ${ZSH_SECRET_VARIABLES} ]]; then
          source ${ZSH_SECRET_VARIABLES}
      fi
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      cdpath=(
          ${CODE_HOME}
          ${GOOGLE}
      )
    #+END_SRC

*** =PATH=

    Avoid [[http://unix.stackexchange.com/questions/62579/is-there-a-way-to-add-a-directory-to-my-path-in-zsh-only-if-its-not-already-pre][duplicating]] =PATH= entries by setting the =path= variable to
    be /unique/ and operating only on it.

    #+BEGIN_SRC sh
      typeset -U path
      path=(
          /usr/local/opt/python/libexec/bin
          /usr/local/sbin
          /usr/local/bin
          ${path}
          ${HOME}/bin
          ${CARGO_HOME}/bin
          ${GOPATH}/bin
          ${GOROOT}/bin
          ${VLC_HOME}
          ${ANDROID_SDK_HOME}/platform-tools
          ${CASK_HOME}/bin
          "$(/usr/local/bin/brew --prefix git)/share/git-core/contrib/diff-highlight"
          ${CHICKEN_HOME}/bin
      )
    #+END_SRC

    Add Python 2 =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user
    - http://docs.pipenv.org/en/latest/basics.html#installing-pipenv

    #+BEGIN_SRC sh
      path=(
          "$(python2 -m site --user-base)/bin"
          ${path}
      )
    #+END_SRC

    #+BEGIN_SRC sh
      if [[ -e ${ZSH_SECRET_PATH} ]]; then
          source ${ZSH_SECRET_PATH}
      fi
    #+END_SRC

** =.zshrc=
   :PROPERTIES:
   :header-args: :tangle ~/.zsh/.zshrc
   :END:

   Interactive shell options.

*** [[https://github.com/krismolendyke/oh-my-zsh][oh-my-zsh]]

    #+BEGIN_SRC sh
      ZSH=${HOME}/.oh-my-zsh
    #+END_SRC

**** [[https://github.com/krismolendyke/oh-my-zsh/blob/master/themes/k20e.zsh-theme][Theme]]

     #+BEGIN_SRC sh
       k20e_aws_is_prod() {
           echo ${AWS_DEFAULT_PROFILE} | grep '\-prod' &> /dev/null
       }

       k20e_aws_prompt_info() {
           INFO=${ZSH_THEME_AWS_PROMPT_PREFIX}

           if [[ -z ${AWS_DEFAULT_PROFILE} ]]; then
               INFO=${INFO}${ZSH_THEME_AWS_PROMPT_UNSET}
           elif $(k20e_aws_is_prod); then
               INFO=${INFO}${ZSH_THEME_AWS_PROMPT_PROD}${AWS_DEFAULT_PROFILE}
           else
               INFO=${INFO}${ZSH_THEME_AWS_PROMPT}${AWS_DEFAULT_PROFILE}
           fi

           echo ${INFO}${ZSH_THEME_AWS_PROMPT_SUFFIX}
       }

       k20e_venv_prompt_info() {
           INFO=${ZSH_THEME_VENV_PROMPT_PREFIX}

           if [[ -n "${VIRTUAL_ENV}" ]] && [[ -d "${VIRTUAL_ENV}" ]]; then
               INFO=${INFO}${ZSH_THEME_VENV_PROMPT_ACTIVATED}$(basename ${VIRTUAL_ENV})
           else
               INFO=${INFO}${ZSH_THEME_VENV_PROMPT_DEACTIVATED}
           fi

           echo ${INFO}${ZSH_THEME_VENV_PROMPT_SUFFIX}
       }
     #+END_SRC

     #+BEGIN_SRC sh
       ZSH_THEME="k20e"
     #+END_SRC

**** Settings

     Use case-sensitive completion.

     #+BEGIN_SRC sh
       CASE_SENSITIVE="true"
     #+END_SRC

     Disable weekly auto-update checks.

     #+BEGIN_SRC sh
       DISABLE_AUTO_UPDATE="true"
     #+END_SRC

     Disable autosetting terminal title.

     #+BEGIN_SRC sh
       DISABLE_AUTO_TITLE="true"
     #+END_SRC

**** [[https://github.com/krismolendyke/oh-my-zsh/tree/master/plugins][Plugins]]

     #+BEGIN_SRC sh
       plugins=(
           brew
           docker
           osx
           pip
           python
           vagrant
       )
     #+END_SRC

**** Load

     #+BEGIN_SRC sh
       source $ZSH/oh-my-zsh.sh
     #+END_SRC

*** [[http://zsh.sourceforge.net/Doc/Release/Options-Index.html][Options]]

    #+BEGIN_SRC sh
      setopt histsavenodups
    #+END_SRC

    #+BEGIN_QUOTE
    When writing out the history file, older commands that duplicate
    newer ones are omitted.
    #+END_QUOTE

    #+BEGIN_SRC sh
      setopt braceccl
      setopt dvorak
      setopt emacs
      setopt no_beep
      unsetopt correct_all
    #+END_SRC

*** History Size

    Perhaps ridiculous.

    #+BEGIN_SRC sh
      HISTSIZE=100000
      SAVEHIST=${HISTSIZE}
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ....="../../.." # yup
      alias emacs="/usr/local/bin/emacs --no-window-system"
      alias emacsclient="/usr/local/bin/emacsclient --no-wait"
      alias ec=emacsclient
      alias g="git"
      alias gh="github.py"
      alias j="jobs -l"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls -lhF"
      alias ls="ls -GF"
      alias top="top -ocpu -Orsize"
      alias v=vagrant
    #+END_SRC

    #+BEGIN_SRC sh
      if [[ -e ${ZSH_SECRET_ALIASES} ]]; then
          source ${ZSH_SECRET_ALIASES}
      fi
    #+END_SRC

**** =ssh TERM=

     My Emacs =multi-term= with =zsh= has =TERM=xterm-256color=.  On
     many remote hosts, primarily Amazon Linux, any =xterm= sets
     =PROMPT_COMMAND= and garbles the prompt by attempting to set the
     window title.  =/etc/bashrc= usually contains something like
     this:

     #+BEGIN_EXAMPLE
       if [ -z "$PROMPT_COMMAND" ]; then
         case $TERM in
         xterm*)
             if [ -e /etc/sysconfig/bash-prompt-xterm ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         screen)
             if [ -e /etc/sysconfig/bash-prompt-screen ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         ,*)
             [ -e /etc/sysconfig/bash-prompt-default ] && PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default
             ;;
           esac
       fi
     #+END_EXAMPLE

     Hacking that to some other reasonable value avoids prompt
     garbling and muscle memory typing =unset PROMPT_COMMAND=.

     #+BEGIN_SRC sh
       alias ssh="TERM=ansi ssh"
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [[ -e ${ZSH_SECRET_FUNCTIONS} ]]; then
          source ${ZSH_SECRET_FUNCTIONS}
      fi
    #+END_SRC

*** AWS

**** Credentials

     #+BEGIN_SRC sh
       alias aws-unset="unset AWS_PROFILE AWS_DEFAULT_PROFILE AWS_CREDENTIAL_FILE EC2_CERT EC2_PRIVATE_KEY"
     #+END_SRC

**** List stacks by =StackName=

     #+BEGIN_SRC sh
       function k20e/aws-stacks-list()
       {
           zparseopts -D -E -A opts -- o: p
           output=${opts[-o]:-"table"}

           name=${1}
           statuses=(
               CREATE_IN_PROGRESS
               CREATE_FAILED
               CREATE_COMPLETE
               ROLLBACK_IN_PROGRESS
               ROLLBACK_FAILED
               ROLLBACK_COMPLETE
               # DELETE_COMPLETE
               DELETE_IN_PROGRESS
               DELETE_FAILED
               UPDATE_IN_PROGRESS
               UPDATE_COMPLETE_CLEANUP_IN_PROGRESS
               UPDATE_COMPLETE
               UPDATE_ROLLBACK_IN_PROGRESS
               UPDATE_ROLLBACK_FAILED
               UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS
               UPDATE_ROLLBACK_COMPLETE
           )

           query=(
               "StackSummaries[*].StackName"               # Array of stack names
               "| [?contains(@, \`${name}\`) == \`true\`]" # Select those with the given name
           )

           # Remove policy stacks if -p is not specified
           if (( ${+opts[-p]} == 0 )); then
               query+=("| [?contains(@, \`Policy\`) == \`false\`]")
           fi

           # Sort results
           query+=("| sort(@)")

           aws --output ${output} \
               cloudformation list-stacks \
               --stack-status-filter ${statuses} \
               --query "${query}"
       }
     #+END_SRC

**** List instances by tag =Name=

     #+BEGIN_SRC sh
       function k20e/aws-instances-describe()
       {
           zparseopts -D -E -A opts -- o:
           output=${opts[-o]:-"table"}

           name=${1}
           query=(
               "Reservations[].Instances[]"
               ".{"
               "Name             : Tags[?Key == \`Name\`].Value | [0],"
               "State            : State.Name,"
               "LaunchTime       : LaunchTime,"
               "PublicIpAddress  : PublicIpAddress,"
               "PrivateIpAddress : PrivateIpAddress,"
               "ImageId          : ImageId,"
               "InstanceType     : InstanceType"
               "}"
           )

           aws --output ${output} \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }
     #+END_SRC

**** Get instance public IP by tag =Name=

     #+BEGIN_SRC sh
       function k20e/aws-instance-public-ip()
       {
           name=${1}
           query="Reservations[].Instances[].PublicIpAddress"

           aws --output text \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }

     #+END_SRC

**** Get instance private IP by tag =Name=

     #+BEGIN_SRC sh
       function k20e/aws-instance-private-ip()
       {
           name=${1}
           query="Reservations[].Instances[].PrivateIpAddress"

           aws --output text \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }

     #+END_SRC

**** Terminate instance by tag =Name=

     #+BEGIN_SRC sh
       function k20e/aws-instance-terminate()
       {
           zparseopts -D -E -A opts -- : f

           name=${1}
           query=(
               "Reservations[].Instances[].InstanceId"
           )

           id=$(
               aws --output text \
                   ec2 describe-instances \
                   --filters "Name=tag:Name,Values=*${name}*" \
                   --query "${query}"
             )

           dry_run="--dry-run"
           if (( ${+opts[-f]} == 1 )); then
               dry_run=""
           fi

           aws --output "text" \
               ec2 terminate-instances \
               --instance-ids ${id} \
               ${dry_run}
       }
     #+END_SRC

**** List images by id

     #+BEGIN_SRC sh
       function k20e/aws-images-describe()
       {
           zparseopts -D -E -A opts -- o:
           output=${opts[-o]:-"table"}

           id=${1:-ami-e3106686}
           aws --output ${output} \
               ec2 describe-images \
               --image-ids "${id}"
       }
     #+END_SRC

**** List EMR clusters

     #+BEGIN_SRC sh
       function k20e/aws-emr-list-clusters()
       {
           query=(
               "Clusters[].Id"
           )

           aws --output text \
               emr list-clusters \
               --cluster-states "WAITING" "RUNNING" \
               --query "${query}"
       }
     #+END_SRC

**** RDS

     Print a =mysql= command to connect to an RDS instance given an
     instance id:

     #+BEGIN_SRC sh
       function k20e/aws-rds-mysql-command()
       {
           zparseopts -D -E -A opts -- i: # Require db instance id
           id=${1}

           query=(
               "DBInstances[0]"        # The first since id is required
               ".["                    # Select the values mysql requires
               "Endpoint.Address",     # Host
               "Endpoint.Port",        # Port
               "MasterUsername"        # User
               "]"
           )

           prog=(
               '{ print'
               '"mysql",'
               '"-h", $1,'             # Host
               '"-P", $2,'             # Port
               '"-u", $3,'             # User
               '"-p"'                  # Ask for password from tty
               '}'
           )

           aws --output text \
               rds describe-db-instances \
               --db-instance-identifier ${id} \
               --query "${query}" \
               | awk "${prog}"
       }
     #+END_SRC

**** Old Boxes

     #+BEGIN_SRC sh
       # aws --output text ec2 describe-instances --query 'Reservations[].Instances[].[LaunchTime,Tags[?Key==`Name`].Value|[0]]' | sort | head
     #+END_SRC

**** [[http://aws.amazon.com/cli/][aws-cli Completion]]

     #+BEGIN_SRC sh
       if [ -e ${CODE_HOME}/aws-cli/bin/aws_zsh_completer.sh ]; then
           source ${CODE_HOME}/aws-cli/bin/aws_zsh_completer.sh
       fi
     #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e/pip-upgrade() {
          if [[ $(whence -w deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }

      function k20e/pip3-upgrade() {
          if [[ $(whence -w deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip3 install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip3 freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

*** [[https://virtualenvwrapper.readthedocs.org/en/latest/][virtualenvwrapper]]

    #+BEGIN_SRC sh
      if (( ${PIPENV_ACTIVE:-0} != 1 )); then
         source virtualenvwrapper.sh
      fi
    #+END_SRC

* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

   #+BEGIN_SRC gitconfig
     [user]
           name = Kris
           email = krismolendyke@users.noreply.github.com
           useconfigonly = true
     [color]
           ui = auto
     [core]
           excludesfile = ~/.gitignore-global
           whitespace = -trailing-space,-space-before-tab
           editor = emacsclient
     [apply]
           whitespace = nowarn
     [alias]
           stache = stash
           st = status -sb
           a = add -p
           l = log --stat --no-merges
           lp = log --patch --stat --no-merges
           wlp = log --patch --stat --color-words --no-merges
           lo = log --oneline --decorate --no-merges
           lf = log --pretty=format: --name-only -z --max-count 1 --no-merges
           co = checkout
           br = branch -v
           wdiff = diff --color-words
           ds = diff --staged
     [advice]
           statusHints = true
     [rebase]
           autosquash = true
     [diff]
           algorithm = histogram
           compactionHeuristic = 1
     [help]
           autocorrect = 1
     [pager]
           diff = diff-highlight | less
           log = diff-highlight | less
           show = diff-highlight | less
     [interactive]
           diffFilter = diff-highlight
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##################################################################################
     # Below from:                                                                    #
     #                                                                                #
     # https://raw.githubusercontent.com/github/gitignore/master/Global/OSX.gitignore #
     ##################################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk

   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt
   :END:

   Use [[https://www.kennethreitz.org/essays/a-better-pip-workflow][A Better Pip Workflow™]] to specify packages that I do actually
   want installed to the system's site packages.

   #+BEGIN_SRC python
     # System packages
     awscli
     boto3
     pipdeptree[graphviz]
     pipenv
     requests[security]
     virtualenvwrapper
   #+END_SRC

* [[https://brew.sh/][Homebrew]]

  =brew= doesn't have a great way to manage dependencies that I've
  found outside of a =Brewfile= and the =bundle= subcommand.

** [[https://github.com/Homebrew/homebrew-bundle][Bundle]]

   Install:

   #+BEGIN_SRC sh
     brew tap Homebrew/bundle
   #+END_SRC

   Programs currently installed by =brew= can be dumped to a global
   =Brewfile=, which defaults to =${HOME}/.Brewfile=:

   #+BEGIN_SRC sh
     brew bundle dump --force --global
   #+END_SRC

   Install all programs specified in the global =${HOME}./Brewfile=:

   #+BEGIN_SRC sh
     brew bundle --global
   #+END_SRC

** =${HOME}/.Brewfile=
   :PROPERTIES:
   :header-args: :tangle ~/.Brewfile
   :END:

   #+BEGIN_SRC sh
     tap "caskroom/cask"
     tap "caskroom/versions"
     tap "homebrew/bundle"
     tap "homebrew/core"
     tap "homebrew/dupes"
     tap "homebrew/games"
     tap "homebrew/python"
     tap "homebrew/services"
     tap "homebrew/versions"
     cask "xquartz"
     brew "libyaml"
     brew "openssl"
     brew "ansible@2.0"
     brew "apr"
     brew "apr-util"
     brew "aspell"
     brew "autoconf"
     brew "automake"
     brew "bash-completion"
     brew "bison"
     brew "freetype"
     brew "fontconfig"
     brew "gettext"
     brew "pixman"
     brew "cairo"
     brew "perl"
     brew "git"
     brew "emacs", args: ["HEAD", "with-cocoa", "with-gnutls"]
     brew "cask"
     brew "chicken"
     brew "cmake"
     brew "faac"
     brew "lame"
     brew "xvid"
     brew "ffmpeg"
     brew "figlet"
     brew "flex"
     brew "fortune"
     brew "gawk"
     brew "gd"
     brew "gdbm"
     brew "gdk-pixbuf"
     brew "gflags"
     brew "p11-kit"
     brew "gnutls"
     brew "go"
     brew "gradle"
     brew "grafana"
     brew "python"
     brew "ruby"
     brew "graphviz", args: ["with-bindings"]
     brew "groovy"
     brew "harfbuzz"
     brew "hunspell"
     brew "imagemagick"
     brew "influxdb"
     brew "ipcalc"
     brew "ispell"
     brew "less"
     brew "libav"
     brew "libcroco"
     brew "librsvg"
     brew "libssh"
     brew "lz4"
     brew "make"
     brew "makedepend"
     brew "mariadb"
     brew "mas"
     brew "maven"
     brew "ninja"
     brew "node"
     brew "oniguruma"
     brew "packer"
     brew "parallel"
     brew "privoxy"
     brew "python3"
     brew "protobuf"
     brew "pstree"
     brew "pv"
     brew "rocksdb"
     brew "scons"
     brew "shared-mime-info"
     brew "sshtrix"
     brew "subversion"
     brew "terminal-notifier"
     brew "texi2html"
     brew "the_silver_searcher"
     brew "tree"
     brew "watch"
     brew "wget"
     brew "yarn"
     brew "yasm"
     brew "youtube-dl"
     brew "yubico-piv-tool"
     brew "zsh"
     cask "inkscape"
     cask "keepingyouawake"
     cask "keybase"
     cask "racket"
     cask "vagrant"
     cask "virtualbox"
     mas "GarageBand", id: 682658836
     mas "iMovie", id: 408981434
     mas "iPhoto", id: 408981381
     mas "Keynote", id: 409183694
     mas "Marked", id: 448925439
     mas "Numbers", id: 409203825
     mas "Pages", id: 409201541
     mas "Pixelmator", id: 407963104
     mas "The Unarchiver", id: 425424353
   #+END_SRC

** [[https://github.com/mas-cli/mas][mas]]

   #+BEGIN_QUOTE
   A simple command line interface for the Mac App Store. Designed for
   scripting and automation.
   #+END_QUOTE

   The =Bundlefile= above should install the App Store programs listed
   with in it using =mas=.
