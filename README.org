#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.bashrc=, will be generated.

* Shell

** Change Default Shell

   This should be the Homebrew installed =bash= /not/ the system
   =bash= path.

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/bash
     export SHELL=/usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     echo ${SHELL}
   #+END_SRC

   On OS X:

   #+BEGIN_SRC sh
     sudo dscl . -create ${HOME} UserShell /usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     dscl . -read ${HOME} UserShell
   #+END_SRC

   Make the Bash configuration directory:

   #+BEGIN_SRC sh
     mkdir -p "${HOME}/.bashrc.d"
   #+END_SRC

** =.inputrc=
   :PROPERTIES:
   :header-args: :tangle ~/.inputrc
   :END:

   #+BEGIN_SRC sh
     set bell-style none
     set colored-completion-prefix on
     set colored-stats on
     set completion-ignore-case off
     set convert-meta off
     set expand-tilde on
     set input-meta on
     set output-meta on
     set show-all-if-ambiguous on
     set visible-stats on
   #+END_SRC

** =.bash_profile=
   :PROPERTIES:
   :header-args: :tangle ~/.bash_profile
   :END:

   #+BEGIN_SRC sh
     source "${HOME}/.bashrc"
   #+END_SRC

** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc
   :END:

   Load all configuration:

   #+BEGIN_SRC sh
     for f in "${HOME}/.bashrc.d/"*.bash; do
         source "${f}"
     done
     unset -v config
   #+END_SRC

** Custom
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/main.bash
   :END:

   Interactive shell options.

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export K20E_SECRET_HOME=${HOME}/.bashrc.d/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${K20E_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${K20E_SECRET_HOME}
      chmod -Rf 0600 ${K20E_SECRET_HOME}/*.sh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export K20E_SECRET_VARIABLES=${K20E_SECRET_HOME}/variables.sh
      export K20E_SECRET_ALIASES=${K20E_SECRET_HOME}/aliases.sh
      export K20E_SECRET_PATH=${K20E_SECRET_HOME}/path.sh
      export K20E_SECRET_FUNCTIONS=${K20E_SECRET_HOME}/functions.sh
    #+END_SRC

*** Options

    #+BEGIN_SRC sh
      shopt -s \
            autocd \
            cdspell \
            checkjobs \
            checkwinsize \
            dirspell \
            no_empty_cmd_completion
    #+END_SRC

*** Variables

    Bash variables.

    #+BEGIN_SRC sh
      LANG=en_US.UTF-8

      HISTSIZE=100000
      HISTCONTROL=erasedups
      HISTTIMEFORMAT='%F %T '
    #+END_SRC

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/Code
      export GOOGLE=${HOME}/Google
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      export CARGO_HOME=${HOME}/.cargo

      # https://github.com/rust-lang-nursery/rustfmt#tips
      export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:${DYLD_LIBRARY_PATH}

      export CASK_HOME=${HOME}/.cask
      export CHICKEN_HOME=$(/usr/local/bin/csi -print '(chicken-home)' | cut -d/ -f 1-8)
      export GROOVY_HOME=/usr/local/opt/groovy/libexec
      export JAVA_HOME=$(/usr/libexec/java_home)
      export VLC_HOME=/Applications/VLC.app/Contents/MacOS

      export DESKTOP=${HOME}/Desktop
      export DOWNLOADS=${HOME}/Downloads
      export GOROOT=/usr/local/opt/go/libexec
      export HOMEBREW_CELLAR=$(/usr/local/bin/brew --prefix)/Cellar

      export GOPATH=${CODE_HOME}/go
      export MANPATH=/usr/local/share/man:${MANPATH}
      export NODE_PATH=/usr/local/lib/node_modules:${NODE_PATH}
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export EMACS_VERSION="HEAD"
      export LANG=en_US.UTF-8
      export PIPENV_SHELL_FANCY=1
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_VARIABLES} ]; then
          source ${K20E_SECRET_VARIABLES}
      fi
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      export CDPATH="${CODE_HOME}:${GOOGLE}"
    #+END_SRC

*** =PATH=

    #+BEGIN_SRC sh
      PATH=/usr/local/sbin:"${PATH}"
      PATH=/usr/local/bin:"${PATH}"
      PATH="${HOME}/bin":"${PATH}"
      PATH="${CARGO_HOME}/bin":"${PATH}"
      PATH="${GOPATH}/bin":"${PATH}"
      PATH="${GOROOT}/bin":"${PATH}"
      PATH="${VLC_HOME}":"${PATH}"
      PATH="${CASK_HOME}/bin":"${PATH}"
      PATH="$(/usr/local/bin/brew --prefix git)/share/git-core/contrib/diff-highlight":"${PATH}"
      PATH="${CHICKEN_HOME}/bin":"${PATH}"
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_PATH} ]; then
          source ${K20E_SECRET_PATH}
      fi
    #+END_SRC

*** =pyenv=

    #+BEGIN_SRC sh
      if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
      fi
    #+END_SRC

    Add Python =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user
    - http://docs.pipenv.org/en/latest/basics.html#installing-pipenv

    #+BEGIN_SRC sh
      export PYTHON_USER_BASE=$(python -m site --user-base)
      PATH="${PYTHON_USER_BASE}/bin":"${PATH}"
    #+END_SRC

*** =PROMPT_COMMAND=

    TODO try out https://github.com/magicmonty/bash-git-prompt

    #+BEGIN_SRC sh
      [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ] && source /usr/local/etc/bash_completion.d/git-prompt.sh

      GIT_PS1_SHOWCOLORHINTS=1
      GIT_PS1_SHOWDIRTYSTATE=1
      GIT_PS1_SHOWUNTRACKEDFILES=1
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_working_directory() {
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          echo "${YELLOW}\w${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_virtual_env() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RESET='\[\e[0m\]'
          local venv='‚àÖ'
          if [ -n "${VIRTUAL_ENV}" ] && [ -d "${VIRTUAL_ENV}" ]; then
              venv=$(basename "${VIRTUAL_ENV}")
          fi
          echo "${BLUE}venv ${venv}${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_prompt_command_aws_profile() {
          declare -r CYAN='\[\e[0;36m\]'
          declare -r RED='\[\e[0;31m\]'
          declare -r RESET='\[\e[0m\]'
          declare profile="${AWS_PROFILE}"
          declare token="${AWS_SECURITY_TOKEN}"
          if [ "${profile}" = 'default' ]; then
              profile='‚úî'
          elif [[ "${profile}" =~ ^prod.* ]]; then
              profile="${RED}‚ö† ${AWS_PROFILE}"
          elif [ -n "${token}" ]; then
              profile='üîë'
          else
              profile='‚àÖ'
          fi
          echo "${CYAN}aws ${profile}${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_python_version() {
          if command -v pyenv 1>/dev/null 2>&1; then
              declare -r PURPLE='\[\e[0;35m\]'
              declare -r RESET='\[\e[0m\]'
              declare -r PYTHON_VERSION=$(pyenv version-name)
              echo "${PURPLE}üêç ${PYTHON_VERSION}${RESET}"
          fi
      }
    #+END_SRC

    #+BEGIN_SRC sh
      PROMPT_COMMAND='__git_ps1 \
      "\n$(k20e_python_version)  $(k20e_prompt_command_aws_profile)  $(k20e_virtual_env)
      $(k20e_working_directory)" \
      "\n\$ " \
      " %s"'
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ..="cd ../"
      alias ...="cd ../../"
      alias ....="cd ../../.."
      alias emacs="/usr/local/bin/emacs --no-window-system"
      alias emacsclient="/usr/local/bin/emacsclient --no-wait"
      alias ec=emacsclient
      alias g="git"
      alias gh="github.py"
      alias j="jobs -l"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls -lhF"
      alias ls="ls -GF"
      alias pipsi="pipsi --bin-dir ${PYTHON_USER_BASE}/bin --home ${HOME}/.virtualenvs"
      alias top="top -ocpu -Orsize"
      alias v="TERM=ansi vagrant"
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_ALIASES} ]; then
          source ${K20E_SECRET_ALIASES}
      fi
    #+END_SRC

**** =ssh TERM=

     My Emacs =multi-term= with =bash= has =TERM=xterm-256color=.  On
     many remote hosts, primarily Amazon Linux, any =xterm= sets
     =PROMPT_COMMAND= and garbles the prompt by attempting to set the
     window title.  =/etc/bashrc= usually contains something like
     this:

     #+BEGIN_EXAMPLE
       if [ -z "$PROMPT_COMMAND" ]; then
         case $TERM in
         xterm*)
             if [ -e /etc/sysconfig/bash-prompt-xterm ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         screen)
             if [ -e /etc/sysconfig/bash-prompt-screen ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         ,*)
             [ -e /etc/sysconfig/bash-prompt-default ] && PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default
             ;;
           esac
       fi
     #+END_EXAMPLE

     Hacking that to some other reasonable value avoids prompt
     garbling and muscle memory typing =unset PROMPT_COMMAND=.

     #+BEGIN_SRC sh
       alias ssh="TERM=ansi ssh"
     #+END_SRC

*** Completions

    #+BEGIN_SRC sh
      [ -e /usr/local/share/bash-completion/bash_completion ] && source /usr/local/share/bash-completion/bash_completion
    #+END_SRC

**** Git

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/git-completion.bash ] && source /usr/local/etc/bash_completion.d/git-completion.bash
     #+END_SRC

     Add completion for my muscle memory alias of =g= for =git=:

     #+BEGIN_SRC sh
        __git_complete g __git_main
     #+END_SRC

**** =pip=

     #+BEGIN_SRC sh
       eval "$(pip completion --bash)"
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_FUNCTIONS} ]; then
          source ${K20E_SECRET_FUNCTIONS}
      fi
    #+END_SRC

*** AWS

**** Credentials

     Unset the many current and legacy AWS CLI environment variables:

     #+BEGIN_SRC sh
       alias aws-list="env | grep AWS_"
       alias aws-unset="unset AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID AWS_PROFILE AWS_PROFILE AWS_CREDENTIAL_FILE AWS_SECURITY_TOKEN EC2_CERT EC2_PRIVATE_KEY"
       aws-unset
     #+END_SRC

     Set default profile:

     #+BEGIN_SRC sh
       export AWS_PROFILE="default"
     #+END_SRC

**** List stacks by =StackName=

     #+BEGIN_SRC sh
       function k20e-aws-stacks-list()
       {
           declare output='table'
           declare show_policies=false

           declare OPTIND OPTARG opt
           while getopts ':o:p' opt; do
               case ${opt} in
                   o)
                       output="${OPTARG}"
                       ;;
                   p)
                       show_policies=true
                       ;;
               esac
           done
           shift $((OPTIND-1))

           declare -r NAME="${1}"

           # DELETE_COMPLETE
           declare -ar STATUSES=(
               'CREATE_IN_PROGRESS'
               'CREATE_FAILED'
               'CREATE_COMPLETE'
               'ROLLBACK_IN_PROGRESS'
               'ROLLBACK_FAILED'
               'ROLLBACK_COMPLETE'
               'DELETE_IN_PROGRESS'
               'DELETE_FAILED'
               'UPDATE_IN_PROGRESS'
               'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS'
               'UPDATE_COMPLETE'
               'UPDATE_ROLLBACK_IN_PROGRESS'
               'UPDATE_ROLLBACK_FAILED'
               'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS'
               'UPDATE_ROLLBACK_COMPLETE'
           )

           declare -a query=(
               'StackSummaries[*].StackName'
               "| [?contains(@, \`${NAME}\`) == \`true\`]"
           )

           if [ "${show_policies}" = false ]; then
               query+=('| [?contains(@, `Policy`) == `false`]')
           fi

           query+=('| sort(@)')

           aws --output "${output}" cloudformation list-stacks --stack-status-filter "${STATUSES[@]}" --query "'${query[*]}'"
       }
     #+END_SRC

**** List instances by tag =Name=

     #+BEGIN_SRC sh
       function k20e-aws-instances-describe()
       {
           zparseopts -D -E -A opts -- o:
           output=${opts[-o]:-"table"}

           name=${1}
           query=(
               "Reservations[].Instances[]"
               ".{"
               "Name             : Tags[?Key == \`Name\`].Value | [0],"
               "State            : State.Name,"
               "LaunchTime       : LaunchTime,"
               "PublicIpAddress  : PublicIpAddress,"
               "PrivateIpAddress : PrivateIpAddress,"
               "ImageId          : ImageId,"
               "InstanceType     : InstanceType"
               "}"
           )

           aws --output ${output} \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }
     #+END_SRC

**** Get instance public IP by tag =Name=

     #+BEGIN_SRC sh
       function k20e-aws-instance-public-ip()
       {
           name=${1}
           query="Reservations[].Instances[].PublicIpAddress"

           aws --output text \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }

     #+END_SRC

**** Get instance private IP by tag =Name=

     #+BEGIN_SRC sh
       function k20e-aws-instance-private-ip()
       {
           name=${1}
           query="Reservations[].Instances[].PrivateIpAddress"

           aws --output text \
               ec2 describe-instances \
               --filters "Name=tag:Name,Values=*${name}*" \
               --query "${query}"
       }

     #+END_SRC

**** Terminate instance by tag =Name=

     #+BEGIN_SRC sh
       function k20e-aws-instance-terminate()
       {
           zparseopts -D -E -A opts -- : f

           name=${1}
           query=(
               "Reservations[].Instances[].InstanceId"
           )

           id=$(
               aws --output text \
                   ec2 describe-instances \
                   --filters "Name=tag:Name,Values=*${name}*" \
                   --query "${query}"
             )

           dry_run="--dry-run"
           if (( ${+opts[-f]} == 1 )); then
               dry_run=""
           fi

           aws --output "text" \
               ec2 terminate-instances \
               --instance-ids ${id} \
               ${dry_run}
       }
     #+END_SRC

**** List images by id

     #+BEGIN_SRC sh
       function k20e-aws-images-describe()
       {
           zparseopts -D -E -A opts -- o:
           output=${opts[-o]:-"table"}

           id=${1:-ami-e3106686}
           aws --output ${output} \
               ec2 describe-images \
               --image-ids "${id}"
       }
     #+END_SRC

**** List EMR clusters

     #+BEGIN_SRC sh
       function k20e-aws-emr-list-clusters()
       {
           query=(
               "Clusters[].Id"
           )

           aws --output text \
               emr list-clusters \
               --cluster-states "WAITING" "RUNNING" \
               --query "${query}"
       }
     #+END_SRC

**** RDS

     Print a =mysql= command to connect to an RDS instance given an
     instance id:

     #+BEGIN_SRC sh
       function k20e-aws-rds-mysql-command()
       {
           zparseopts -D -E -A opts -- i: # Require db instance id
           id=${1}

           query=(
               "DBInstances[0]"        # The first since id is required
               ".["                    # Select the values mysql requires
               "Endpoint.Address",     # Host
               "Endpoint.Port",        # Port
               "MasterUsername"        # User
               "]"
           )

           prog=(
               '{ print'
               '"mysql",'
               '"-h", $1,'             # Host
               '"-P", $2,'             # Port
               '"-u", $3,'             # User
               '"-p"'                  # Ask for password from tty
               '}'
           )

           aws --output text \
               rds describe-db-instances \
               --db-instance-identifier ${id} \
               --query "${query}" \
               | awk "${prog}"
       }
     #+END_SRC

**** Old Boxes

     #+BEGIN_SRC sh
       # aws --output text ec2 describe-instances --query 'Reservations[].Instances[].[LaunchTime,Tags[?Key==`Name`].Value|[0]]' | sort | head
     #+END_SRC

**** [[http://aws.amazon.com/cli/][aws-cli Completion]]

     #+BEGIN_SRC sh
       if [ -e ${PYTHON_USER_BASE}/bin/aws_bash_completer ]; then
           source ${PYTHON_USER_BASE}/bin/aws_bash_completer
       fi
     #+END_SRC

*** [[https://github.com/mitsuhiko/pipsi][pipsi]]
    :PROPERTIES:
    :CUSTOM_ID: pipsi
    :END:

    Install Python programs into their own virtual environments.  Only
    CLI programs should be installed this way, no libraries.

    #+BEGIN_SRC sh
      function k20e-pipsi-upgrade() {
          local command=${1:-upgrade}

          local packages=(
              'awscli'
              'pew'
              'pipdeptree[graphviz]'
              'pipenv'
          )

          for package in ${packages[@]}; do
              pipsi "${command}" "${package}"
          done
      }
    #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e-pip-upgrade() {
          if [[ $(which deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

*** [[https://virtualenvwrapper.readthedocs.org/en/latest/][virtualenvwrapper]]

    #+BEGIN_SRC sh
      if (( ${PIPENV_ACTIVE:-0} != 1 )); then
         source virtualenvwrapper.sh
      fi
    #+END_SRC

* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

   #+BEGIN_SRC gitconfig
     [user]
           name = Kris
           email = krismolendyke@users.noreply.github.com
           useconfigonly = true
     [color]
           ui = auto
     [core]
           excludesfile = ~/.gitignore-global
           whitespace = -trailing-space,-space-before-tab
           editor = emacsclient
     [apply]
           whitespace = nowarn
     [alias]
           stache = stash
           st = status -sb
           a = add -p
           l = log --stat --no-merges
           lp = log --patch --stat --no-merges
           wlp = log --patch --stat --color-words --no-merges
           lo = log --oneline --decorate --no-merges
           lf = log --pretty=format: --name-only -z --max-count 1 --no-merges
           co = checkout
           br = branch -v
           wdiff = diff --color-words
           ds = diff --staged
     [advice]
           statusHints = true
     [rebase]
           autosquash = true
     [diff]
           algorithm = histogram
           compactionHeuristic = 1
     [help]
           autocorrect = 1
     [pager]
           diff = diff-highlight | less
           log = diff-highlight | less
           show = diff-highlight | less
     [interactive]
           diffFilter = diff-highlight
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##################################################################################
     # Below from:                                                                    #
     #                                                                                #
     # https://raw.githubusercontent.com/github/gitignore/master/Global/OSX.gitignore #
     ##################################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk

   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt
   :END:

   Use [[https://www.kennethreitz.org/essays/a-better-pip-workflow][A Better Pip Workflow‚Ñ¢]] to specify packages that I do actually
   want installed to the system's site packages.  Everything else
   should be installed with [[id:pipsi][pipsi]] to discrete virtual environments.

   #+BEGIN_SRC python
     # System packages
     pipsi
     virtualenv
     virtualenvwrapper
   #+END_SRC

* [[https://brew.sh/][Homebrew]]

  =brew= doesn't have a great way to manage dependencies that I've
  found outside of a =Brewfile= and the =bundle= subcommand.

** [[https://github.com/Homebrew/homebrew-bundle][Bundle]]

   Install:

   #+BEGIN_SRC sh
     brew tap Homebrew/bundle
   #+END_SRC

   Programs currently installed by =brew= can be dumped to a global
   =Brewfile=, which defaults to =${HOME}/.Brewfile=:

   #+BEGIN_SRC sh
     brew bundle dump --force --global --verbose
   #+END_SRC

   Install all programs specified in the global =${HOME}./Brewfile=:

   #+BEGIN_SRC sh
     brew bundle --global
   #+END_SRC

** =${HOME}/.Brewfile=
   :PROPERTIES:
   :header-args: :tangle ~/.Brewfile
   :END:

   #+BEGIN_SRC sh
     tap "caskroom/cask"
     tap "caskroom/versions"
     tap "homebrew/bundle"
     tap "homebrew/core"
     tap "homebrew/dupes"
     tap "homebrew/games"
     tap "homebrew/python"
     tap "homebrew/services"
     tap "homebrew/versions"
     cask "xquartz"
     brew "apr"
     brew "openssl"
     brew "apr-util"
     brew "aspell"
     brew "autoconf"
     brew "automake"
     brew "bash"
     brew "bash-completion@2"
     brew "bison"
     brew "freetype"
     brew "fontconfig"
     brew "gettext", link: true
     brew "pixman"
     brew "cairo"
     brew "emacs", args: ["HEAD", "with-cocoa", "with-gnutls"]
     brew "cask"
     brew "chicken"
     brew "cmake"
     brew "faac"
     brew "lame"
     brew "xvid"
     brew "ffmpeg"
     brew "figlet"
     brew "flex"
     brew "gawk"
     brew "gcc"
     brew "gd"
     brew "gdk-pixbuf"
     brew "gflags"
     brew "git"
     brew "p11-kit"
     brew "gnutls"
     brew "go"
     brew "libyaml"
     brew "ruby"
     brew "graphviz", args: ["with-bindings"]
     brew "gprof2dot"
     brew "gradle"
     brew "grafana"
     brew "groovy"
     brew "harfbuzz"
     brew "hunspell"
     brew "imagemagick"
     brew "influxdb"
     brew "ipcalc"
     brew "ispell"
     brew "less"
     brew "libav"
     brew "libcroco"
     brew "libdvdcss"
     brew "librsvg"
     brew "libssh"
     brew "lz4"
     brew "make"
     brew "makedepend"
     brew "mariadb"
     brew "mas"
     brew "maven"
     brew "ninja"
     brew "node"
     brew "oniguruma"
     brew "packer"
     brew "parallel"
     brew "perl"
     brew "privoxy"
     brew "protobuf"
     brew "pstree"
     brew "pv"
     brew "pyenv"
     brew "rocksdb"
     brew "rustup-init"
     brew "scons"
     brew "shared-mime-info"
     brew "sshtrix"
     brew "subversion"
     brew "terminal-notifier"
     brew "texi2html"
     brew "the_silver_searcher"
     brew "tree"
     brew "valgrind"
     brew "watch"
     brew "wget"
     brew "yarn"
     brew "yasm"
     brew "youtube-dl"
     brew "yubico-piv-tool"
     cask "amethyst"
     cask "android-platform-tools"
     cask "etcher"
     cask "inkscape"
     cask "keepingyouawake"
     cask "keybase"
     cask "racket"
     cask "vagrant"
     cask "virtualbox"
     cask "vlc"
     mas "GarageBand", id: 682658836
     mas "iMovie", id: 408981434
     mas "iPhoto", id: 408981381
     mas "Keynote", id: 409183694
     mas "Marked", id: 448925439
     mas "Numbers", id: 409203825
     mas "Pages", id: 409201541
     mas "Pixelmator", id: 407963104
     mas "The Unarchiver", id: 425424353
   #+END_SRC

** [[https://github.com/mas-cli/mas][mas]]

   #+BEGIN_QUOTE
   A simple command line interface for the Mac App Store. Designed for
   scripting and automation.
   #+END_QUOTE

   The =Bundlefile= above should install the App Store programs listed
   with in it using =mas=.
